/* Scheduler includes. */
#include "FreeRTOS.h"
#include "queue.h"
#include "semphr.h"

/* Library includes. */
#include "stm32f10x.h"
#include <stdio.h>

/* Demo application includes. */
#include "ble.h"
#include "imu.h"
#include "led.h"
#include "interruptPriority.h"
#include "ADC.h"
#include "usart2.h"

const u8 bleAppAckCmdBrushOn[6] = {0x88,0x11,0x06,0xB1,0x11,0x01};
const u8 bleAppAckCmdBrushOff[6] = {0x88,0x11,0x06,0xB2,0x11,0x02};
const u8 bleCmdBrushOn[6] = {0x88,0x11,0x06,0xA1,0x11,0x01};
const u8 bleCmdBrushOff[6] = {0x88,0x11,0x06,0xA2,0x11,0x02};

enum commandAck AckToApp;
enum commandToApp CmdToApp;
enum commandID command;

/*-----------------------------------------------------------*/

void BLE_SendData(S_FLOAT_XYZ Q_ANGLE)
{
	int _temp;
	u8 sum;

	BLESendBuff.data[0]=0x88;
	BLESendBuff.data[1]=0x01;
	BLESendBuff.data[2]=0x0B;
	
	BLESendBuff.data[4]=0x31;
	_temp = (int)(Q_ANGLE.X*100);
	BLESendBuff.data[5]=BYTE1(_temp);
	BLESendBuff.data[6]=BYTE0(_temp);
	_temp = (int)(Q_ANGLE.Y*100);
	BLESendBuff.data[7]=BYTE1(_temp);
	BLESendBuff.data[8]=BYTE0(_temp);
	_temp = (int)(ADC_ConvertedValue[0]);
	BLESendBuff.data[9]=BYTE1(_temp);
	BLESendBuff.data[10]=BYTE0(_temp);


	sum = 0;
	sum += BLESendBuff.data[0];
	sum += BLESendBuff.data[1];
	sum += BLESendBuff.data[2];
	
	for(int i=4;i<11;i++)
		sum += BLESendBuff.data[i];
	BLESendBuff.data[3] = sum;	
	
	
	DMA_SetCurrDataCounter(DMA1_Channel7,BLESendBuff.data[2]);
  DMA_Cmd(DMA1_Channel7, ENABLE); 
		
}

/*-----------------------------------------------------------*/

void BLE_SendStorageData(uint8_t  data[6])
{
	u8 sum;

	BLESendBuff.data[0]=0x88;
	BLESendBuff.data[1]=0x01;
	BLESendBuff.data[2]=0x0B;
	
	BLESendBuff.data[4]=0x31;
	
	BLESendBuff.data[5]=data[0];
	BLESendBuff.data[6]=data[1];
	
	BLESendBuff.data[7]=data[2];
	BLESendBuff.data[8]=data[3];
	
	BLESendBuff.data[9]=data[4];
	BLESendBuff.data[10]=data[5];

	sum = 0;
	sum += BLESendBuff.data[0];
	sum += BLESendBuff.data[1];
	sum += BLESendBuff.data[2];
	
	for(int i=4;i<11;i++)
		sum += BLESendBuff.data[i];
	BLESendBuff.data[3] = sum;	
	
	
	DMA_SetCurrDataCounter(DMA1_Channel7,BLESendBuff.data[2]);
  DMA_Cmd(DMA1_Channel7, ENABLE); 
		
}

/*-----------------------------------------------------------*/

void BLE_SendCmd(enum commandToApp CmdApp)
{
	
	if(CmdApp == CmdBurshOn)
	{
		for(u8 i=0; i<6; i++)
		{
			BLESendBuff.data[i] = bleCmdBrushOn[i];
		}
		DMA_SetCurrDataCounter(DMA1_Channel7,BLESendBuff.data[2]);
		DMA_Cmd(DMA1_Channel7, ENABLE); 
	}else if(CmdApp == AckBurshOff)
	{
		for(u8 i=0; i<6; i++)
		{
			BLESendBuff.data[i] = bleCmdBrushOff[i];
		}
		DMA_SetCurrDataCounter(DMA1_Channel7,BLESendBuff.data[2]);
		DMA_Cmd(DMA1_Channel7, ENABLE); 
	}

}

/*-----------------------------------------------------------*/

void BLE_SendAck(enum commandAck Ack)
{
	if(Ack == AckBurshOn)
	{
		for(u8 i=0; i<6; i++)
		{
			BLESendBuff.data[i] = bleAppAckCmdBrushOn[i];
		}
		DMA_SetCurrDataCounter(DMA1_Channel7,bleAppAckCmdBrushOn[2]);
		DMA_Cmd(DMA1_Channel7, ENABLE); 
	}else if(Ack == AckBurshOff)
	{
		for(u8 i=0; i<6; i++)
		{
			BLESendBuff.data[i] = bleAppAckCmdBrushOff[i];
		}
		DMA_SetCurrDataCounter(DMA1_Channel7,bleAppAckCmdBrushOff[2]);
		DMA_Cmd(DMA1_Channel7, ENABLE); 
	}
		
}

/*-----------------------------------------------------------*/



static u8 BLE_crc(BLE_APPBuff * pBuff)
{
	u8 sum;
	
	sum = 0;
	sum += (*pBuff).data[0];
	sum += (*pBuff).data[1];
	sum += (*pBuff).data[2];

	for(u8 i = 4; i < (*pBuff).length ; i ++)
	{
		sum += (*pBuff).data[i];
	}
	
	if(sum == (*pBuff).data[3])
	{
		return 1;
	}else{
		return 0;
	}
		
}

/*-----------------------------------------------------------*/
const u8 commandAck[] = {"TTM:OK\r\n\0"};

u8 APPbuffDataPrepare(BLE_APPBuff * pBuff)
{
	u8 errFlag = 0;
	
	if((*pBuff).data[0] == 0x88)
	{
		if(BLE_crc(pBuff) == 0)
			return 0;
		
		if(((*pBuff).data[4] & 0xF0) == 0x10 )
		{
			command = COMbasedControl;
		}else if(((*pBuff).data[4] & 0xF0) == 0x20)
		{
			command = COMwifiControl;
		}else if(((*pBuff).data[4] & 0xF0) == 0x30)
		{
			command = COMangleData;
		}else 
		{
			command = COMnoControl;
		}
		
		return 1;
		
	}else if((*pBuff).data[0] == 'T')
	{
		for(u8 i = 0; i < (*pBuff).length; i++)
		{
			if((*pBuff).data[i] != commandAck[i])
			{
				errFlag = 1;
			}
		}
		if(errFlag == 0)
		{
			controlSemaphore.bleConncet = 1;
		}
		return 0;
	}
	
	return 0;
}





