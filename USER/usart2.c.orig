/*
	BASIC INTERRUPT DRIVEN SERIAL PORT DRIVER FOR UART0.
*/

/* Scheduler includes. */
#include "FreeRTOS.h"
#include "queue.h"
#include "semphr.h"

/* Library includes. */
#include "stm32f10x.h"
#include <stdio.h>

/* Demo application includes. */
#include "ble.h"
#include "imu.h"
#include "led.h"
#include "interruptPriority.h"
#include "ADC.h"
#include "usart2.h"

/* Misc defines. */
#define serINVALID_QUEUE				( ( xQueueHandle ) 0 )
#define serNO_BLOCK						( ( portTickType ) 0 )
#define serTX_BLOCK_TIME				( 1 / portTICK_RATE_MS )

BLE_APPBuff BLESendBuff;
BLE_APPBuff BLEReceiveBuff;
//BLE_APPBuff BLESendCmd;

/* The queue used to hold received characters. */

xSemaphoreHandle xSemaphoreBLEReadFull;
xSemaphoreHandle xSemaphoreBLESendOver;

void BLEIOInit(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB , ENABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14; 
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15; 
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	BLE_EN(ON);
	BLE_BRTS(ON);
}

/*-----------------------------------------------------------*/

void USART2_DMA_TxConfig(u8 pUsart2TxBuff[32] )
{
		NVIC_InitTypeDef NVIC_InitStructure;
		DMA_InitTypeDef DMA_InitStructure;
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
		DMA_Cmd(DMA1_Channel7, DISABLE);
		DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)(&USART2->DR);	   
		DMA_InitStructure.DMA_MemoryBaseAddr = (u32)pUsart2TxBuff;
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;	
		DMA_InitStructure.DMA_BufferSize = 32; 
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; 
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	 
		DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ;
		//DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;	 
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;  
		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
		DMA_Init(DMA1_Channel7, &DMA_InitStructure);
	
		DMA_ClearFlag(DMA1_FLAG_GL7);
	
		DMA_Cmd (DMA1_Channel7,DISABLE);	
		
		NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = INTERRUPT_PRIORITY_DMA1_Channel7;
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init( &NVIC_InitStructure );
		
		DMA_ITConfig(DMA1_Channel7, DMA_IT_TC, ENABLE);
		  
}

/*-----------------------------------------------------------*/

void USART2_DMA_RxConfig(u8 * pUsart2RxBuff )
{

		DMA_InitTypeDef DMA_InitStructure;
		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
		DMA_Cmd(DMA1_Channel6, DISABLE);
		DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)(&USART2->DR);	   
		DMA_InitStructure.DMA_MemoryBaseAddr = (u32)pUsart2RxBuff;
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;	
		DMA_InitStructure.DMA_BufferSize = BleRecevieBuffLength; 
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; 
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	 
		DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ;
		//DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;	 
		DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;  
		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
		DMA_Init(DMA1_Channel6, &DMA_InitStructure);
	
		DMA_ClearFlag(DMA1_FLAG_GL6);
	
		DMA_Cmd (DMA1_Channel6,ENABLE);	

}

/*-----------------------------------------------------------*/

void DMA1_Channel7_IRQHandler(void)
{
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
	
    if(DMA_GetITStatus(DMA1_FLAG_TC7))
    {
      DMA_ClearFlag(DMA1_FLAG_GL7);        
			DMA_Cmd(DMA1_Channel7, DISABLE);
			xSemaphoreGiveFromISR( xSemaphoreBLESendOver, &xHigherPriorityTaskWoken );
			//BLE_BRTS(OFF);
    }
}

/*-----------------------------------------------------------*/

void USART2_IRQHandler(void)
{

	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;

	if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)  // 空闲中断
	{
		DMA_Cmd(DMA1_Channel6, DISABLE);
		DMA_ClearFlag( DMA1_FLAG_GL6 );           						// ?DMA???
		//LumMod_Rx_Data.index = LUMMOD_RX_BSIZE - DMA_GetCurrDataCounter(DMA1_Channel5); //?????????
		BLEReceiveBuff.length = BleRecevieBuffLength - DMA_GetCurrDataCounter(DMA1_Channel6);
		DMA_SetCurrDataCounter(DMA1_Channel6,BleRecevieBuffLength);
		DMA_Cmd(DMA1_Channel6, ENABLE);
		USART_ReceiveData( USART2 ); 													// Clear IDLE interrupt flag bit
		xSemaphoreGiveFromISR( xSemaphoreBLEReadFull, &xHigherPriorityTaskWoken );
	}
}

/*-----------------------------------------------------------*/

/*
 * See the serial2.h header file.
 */
void Usart2Init( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	vSemaphoreCreateBinary( xSemaphoreBLEReadFull );
	vSemaphoreCreateBinary( xSemaphoreBLESendOver );

	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);	

	/* Configure USART1 Rx (PA10) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init( GPIOA, &GPIO_InitStructure );
	
	/* Configure USART1 Tx (PA9) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init( GPIOA, &GPIO_InitStructure );

	USART_InitStructure.USART_BaudRate = ulWantedBaud;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
		
	USART_Init( USART2, &USART_InitStructure );
	
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = INTERRUPT_PRIORITY_USART2_RX;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init( &NVIC_InitStructure );
	
	USART_ITConfig(USART2, USART_IT_IDLE, ENABLE);
	
	USART_Cmd( USART2, ENABLE );
	USART2_DMA_TxConfig(BLESendBuff.data);
	USART2_DMA_RxConfig(BLEReceiveBuff.data);
	USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);  
	USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE); 

}

/*-----------------------------------------------------------*/

int fputc(int ch, FILE *f)
{
	/* 将Printf内容发往串口 */
	USART_SendData(USART2, (unsigned char) ch);
	while (!(USART2->SR & USART_FLAG_TXE));
	
	return (ch);
}


